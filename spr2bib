#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Example input (springer)
#On the foundations of combinatorial theory I. Theory of MÃ¶bius Functions
#Journal Probability Theory and Related Fields
#Publisher   Springer Berlin / Heidelberg
#ISSN    0178-8051 (Print) 1432-2064 (Online)
#Issue   Volume 2, Number 4 / January, 1964
#DOI 10.1007/BF00531932
#Pages   340-368
#Subject Collection  Mathematics and Statistics
#SpringerLink Date   Sunday, December 12, 2004


import sys
from re import match

def bibtexize(s):

    s=s.strip()
    if not s:
        return s
    out=[s[0]]
    for c in s[1:]:
        if c.isupper():
            out.append("{"+c+"}")
        else:
            out.append(c)
    return "".join(out)

patterns = (
 "Journal *(?P<journal>.*)",
 ".*Volume *(?P<volume>\d*).*",
 "Issue.* (?P<year>\d+) *$",
 "Issue.*Number *(?P<number>\d+).*",
 "Pages *(?P<pages>[^ ]*) *$",
 )

keys=(
    "author",
    "title",
    "journal",
    "number",
    "volume",
    "year",
    "pages",
)
d={}

for key in keys:
    d[key]=""

lines=[line.strip() for line in sys.stdin]
d["title"]=lines[0]
lines.pop(0)

for line in lines:
    for pattern in patterns:
        m=match(pattern,line)
        if m:
            d.update(m.groupdict())

bibkey=":"+"".join([word[0] for word in d["title"].split()])
print "@Article{"+bibkey+","
n=len(d)
for key in keys:
    n=n-1
    print key+"="+'"'+bibtexize(d[key])+'"',
    if n>0:
        print ",",
    print
print "}"


            
